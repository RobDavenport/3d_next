use std::{fs, io::Write};

use glam::{Vec2, Vec3};
use image::GenericImageView;

use crate::{asset_list::AssetList, meshes::generate_meshes, textures::generate_textures};

pub const INPUT_DIR: &str = "./assets";
const EXPORT_CONFIG: &str = "./export.yaml";
const CODE_OUTPUT_DIR: &str = "./game/src/generated/mod.rs";
pub const ASSET_OUTPUT_DIR: &str = "./game/src/generated/";

const SUPPORTED_IMAGE_EXTENSIONS: &[&str] = &["png", "jpg"];

mod animations;
mod asset_list;
mod meshes;
mod proc_meshes;
mod skeleton;
mod skin;
mod textures;

// For output files
pub const TEXTURES_EXTENSION: &str = "TEX";
pub const MESH_EXTENSION: &str = "MESH";

pub const ANIMATION_EXTENSION: &str = "ANM";
pub const SKELETON_EXTENSION: &str = "SKL";
pub const SKIN_EXTENSION: &str = "SKN";

// Writes the bytes of the file
pub fn write_file(filename: &str, data: &[u8]) {
    let write_path = format!("{ASSET_OUTPUT_DIR}/{filename}");
    let mut file_out = fs::File::create(write_path).unwrap();
    file_out.write_all(data).unwrap();
}

fn main() {
    println!("Executing custom export script...");

    let file =
        fs::read(EXPORT_CONFIG).unwrap_or_else(|_| panic!("Failed to find {EXPORT_CONFIG} file"));

    let config: AssetList = serde_yaml::from_slice(&file)
        .map_err(|e| e.to_string())
        .unwrap();

    let mut output = String::from(
        "/// Autogenerated file from exporter/main.rs.
/// To regenrate this file, run the exporter again
/// You shouldn't be editing this file.
use shared::{animation::AnimationBytes, texture::TextureBytes, mesh::MeshBytes, skeleton::SkeletonBytes, skin::SkinBytes};\n\n",
    );

    output.push_str(&generate_textures(&config));
    output.push_str(&generate_meshes(&config));

    let mut output_file = fs::File::create(CODE_OUTPUT_DIR).unwrap();

    output_file
        .write_all(output.as_bytes())
        .expect("Failed to write output file");
}
