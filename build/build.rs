use std::{fs, io::Write, mem::size_of};

use bytemuck::{cast_slice, from_bytes};
use glam::{Mat4, Vec2, Vec3};
use image::GenericImageView;

use crate::{meshes::generate_meshes, textures::generate_textures};

pub const INPUT_DIR: &str = "./assets";
pub const OUTPUT_DIR: &str = "./src/assets/generated";

const TEXTURES: &[[&str; 2]] = &[
    ["gamercade", "png"],
    ["brickwall", "jpg"],
    ["brickwall_normal", "jpg"],
];

const MESHES: &[[&str; 2]] = &[
    ["BoxVertexColors", "glb"],
    ["Fox", "glb"],
    ["Duck", "glb"],
    ["DamagedHelmet", "glb"],
];

mod animations;
mod meshes;
mod skeleton;
mod textures;

// For output files
pub const TEXTURES_EXTENSION: &str = "TEX";
pub const VERTICES_EXTENSION: &str = "VER";
pub const INDICES_EXTENSION: &str = "IND";
pub const PARAMETERS_EXTENSION: &str = "PAR";

pub const ANIMATION_EXTENSION: &str = "ANI";

pub const SKELETON_EXTENSION: &str = "SKL";
pub const CHILDREN_EXTENSION: &str = "CHI";
pub const SKIN_EXTENSION: &str = "SKN";

// Writes the bytes of the file
pub fn write_file(filename: &str, data: &[u8]) {
    let write_path = format!("{OUTPUT_DIR}/{filename}");
    let mut file_out = fs::File::create(write_path).unwrap();
    file_out.write_all(data).unwrap();
}

fn main() {
    println!("Executing custom build script...");

    let modfile_path = format!("{OUTPUT_DIR}.rs");

    // if fs::File::open(&modfile_path).is_ok() {
    //     println!("Modfile already exists. Skipping model import scripts");
    //     return;
    // } else {
    //     println!("Generating generated.rs");
    // }

    let mut output = String::from(
        "/// Autogenerated file from build.rs.
/// To regenrate this file, delete it.
/// You shouldn't be editing this file.
use include_bytes_aligned::include_bytes_aligned;
use crate::assets::{SkinData, StaticMeshData, Texture, SkeletonData};\n\n",
    );

    output.push_str(&generate_textures());
    output.push_str(&generate_meshes());

    let mut output_file = fs::File::create(modfile_path).unwrap();

    output_file
        .write_all(output.as_bytes())
        .expect("Failed to write output file");
}
